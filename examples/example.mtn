//Hey look!
//Comments before the module declaration!

module Main;

import AnotherModule;
using import YetAnotherModule;



struct:MyType {
	let:Bool field = undefined;
}


let:i32 garbage_data = undefined;
let:i32 some_variable = 69;

func:i32 get_number(let:Bool overwrite) {
	func:Bool is_true(let:Bool arg) { //Functions can be declared in any scope
		return arg == true;
	}

	if(overwrite) {
		some_variable = 42;
	}

	return 9;
}


func:Void do_thing(let:Bool should_do, let:i32 max) {
	if(should_do) {
		let:i32 index = 0;
		while(index <= max) {
			index = index + 1;
		}
	}
	elif(max < 10) {
		max = max * 2;
	}
	elif(max >= 10) {
		max = max * 5;
	}
	else {
		max = max * 9;
	}
}


func:Void no_args() {
	return;
}


func:i32 return_checking() {
	if(false) { return 0; }
	elif(false) { return 1; }
	else { return 2; }
}

test "returned two" {
	return return_checking() == 2;
}


func:Bool returns_bool() {
	return true;
}


func:Void main() {
	//Variable declaration with value
	let:i32 lucky_number = 42;
	let:i32 another_number = 2 * 3 + 1 / 5 + 4;
	let:Bool my_bool = true!;

	{
		another_number = another_number - 2;
	}


	let:Bool result = true == false!;
	result = true != false;
	result = 10 > 5;
	result = 10 >= 5;
	result = 10 < 15;
	result = 10 <= 15;
	result = false == result!;

	if(true == false!) {
		let:Bool inner_bool = true;
		result = false;
	}


	let:i32 iteration = 0;
	while(iteration <= 9) {
		iteration = iteration + 1;
	}

	let:i32 returned_value = get_number(true) + 1;
	do_thing(true, 10);

	let:i32 count = 0;
	while(true) {
		count = count + 1;

		if(count <= 10) {
			continue;
		}
		break;
	}

	no_args();


	let:i32 original_variable = 2000;
	let:i32:Ptr pointer = original_variable&;

	let:i32:Ptr another_pointer = undefined;
	another_pointer = pointer;
	if(pointer == another_pointer) { }

	let:i32 new_variable = pointer$;


	let:i32 first_var = 9;
	let:i32 second_var = first_var = 50;


	let:i32 value_from_other_file = some_func_in_other_file(returns_bool());


	if(returns_bool()) { }


	AnotherModule.some_func();
	let:i32 num_from_module = AnotherModule.magic_global_var;


	let:Bool result_from_yam = yam_do_thing();
	let:i32 num_from_yam = yam_global_var;


	let:u8 first_char_variable = ' ';
	let:u8 second_char_variable = 'a';
	let:u8 third_char_variable = '\n';
	let:u8 forth_char_variable = '\r';
	let:u8 fifth_char_variable = '\t';
	let:u8 sixth_char_variable = '\'';
	let:u8 seventh_char_variable = '\\';
}
