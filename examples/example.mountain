//Variable declaration with value
let:i32 lucky_number = 42;
let:i32 another_number = 2 * 3 + 1 / 5 + 4;
let:Bool my_bool = true!;

{
    another_number = another_number - 2;
}


let:Bool result = true == false!;
result = true != false;
result = 10 > 5;
result = 10 >= 5;
result = 10 < 15;
result = 10 <= 15;
result = false == result!;


if(true == false!) {
    let:Bool inner_bool = true;
    result = false;
}

let:i32 iteration = 0;
while(iteration <= 9) {
    iteration = iteration + 1;
}


struct:MyType { //Structs are currently only parsed
    let:Bool field = true; //Fields are not parsed at all yet
}


let:i32 some_variable = 69;

func:i32 get_number(let:i32 argument) {
	func:Bool is_true() //Functions can be declared in (almost?) any scope
	{}

    some_variable = 42;
    //TODO: Add return statement and trace to ensure all paths return
}

let:i32 following_variable = 420;


func:Void do_thing(let:Bool should_do, let:i32 max) {
	if(should_do) {
		let:i32 index = 0;
		while(index <= max) {
			index = index + 1;
		}
	}
	elif(max < 10) {
		max = max * 2;
	}
	elif(max >= 10) {
		max = max * 5;
	}
	else {
		max = max * 9;
	}
}

do_thing(true, 10);


let:i32 count = 0;
while(true) {
	count = count + 1;

	if(count > 10) {
		break;
	}
}


func:Void no_args()
{}

no_args();
